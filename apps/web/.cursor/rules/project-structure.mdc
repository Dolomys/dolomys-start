---
description: 
globs: 
alwaysApply: false
---
# Structure du Projet

## Organisation des Dossiers

La structure du projet suit une organisation logique et modulaire :

```
src/
â”œâ”€â”€ routes/          # Routes tanstack
â”œâ”€â”€ features/      # Modules fonctionnels
â”œâ”€â”€ components/    # Composants partagÃ©s
â”œâ”€â”€ lib/          # Utilitaires et configurations
â”œâ”€â”€ hooks/        # Hooks React partagÃ©s
â””â”€â”€ types/        # Types TypeScript globaux
```

### Le Dossier `routes`

Le dossier routes contient la configuration de TanStack Router. Il centralise :
-Les layouts partagÃ©s (via RouteLayout)
-Les pages (sous forme de composants associÃ©s Ã  des routes)
-La configuration complÃ¨te du systÃ¨me de routing (arbre des routes, paramÃ¨tres dynamiques, etc.)

Câ€™est ici que lâ€™on dÃ©clare lâ€™ensemble de la structure de navigation de lâ€™application.

### Le Dossier `features`

C'est le cÅ“ur de notre architecture. Chaque feature est un module autonome :

```
features/creators/
â”œâ”€â”€ api/          # Appels API et React Query hooks
â”œâ”€â”€ components/   # Composants spÃ©cifiques Ã  la feature
â””â”€â”€ types/       # Types et interfaces
```

:::info Pourquoi cette structure ?
Cette organisation permet de :

- Trouver rapidement le code liÃ© Ã  une fonctionnalitÃ©
- Ã‰viter les dÃ©pendances circulaires
- Faciliter le refactoring
- Maintenir une sÃ©paration claire des responsabilitÃ©s
  :::

### Les Dossiers PartagÃ©s

- `components/` : Composants UI rÃ©utilisables
- `lib/` : Configurations et utilitaires
- `hooks/` : Hooks React partagÃ©s
- `types/` : Types TypeScript globaux

## Bonnes Pratiques

1. **Isolation des Features**

   - Chaque feature doit Ãªtre autonome
   - Minimiser les dÃ©pendances entre features
   - Utiliser les dossiers partagÃ©s avec parcimonie

2. **Organisation des Imports**

   ```typescript
   // âœ… Bon
   import { Button } from "@/components/ui";
   import { useUser } from "@/features/user";

   // ğŸš« Ã€ Ã©viter
   import { Button } from "../../components/ui";
   import { useUser } from "../user/hooks";
   ```

3. **Nommage des Fichiers**
   - Utilisez des noms descriptifs
   - Suivez une convention cohÃ©rente
   - PrÃ©fixez les types avec `types.`
   - Suffixez les hooks avec `.hook`
